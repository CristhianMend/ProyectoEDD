package pe.edu.ucv.proyectoedd;

import java.awt.Color;
import java.awt.Font;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import pe.edu.ucv.proyectoedd.productos.Categoria;
import pe.edu.ucv.proyectoedd.productos.Producto;

/**
 * @author Grupo 3
 */
public class QatunaProductosApp extends javax.swing.JFrame {

    int filaSeleCategoria;
    int filaSeleProducto;
    public static ListaCategorias listaCategorias;
    public static ListaProductos listaProductos;

    /**
     * Creates new form QatunaApp
     */
    public QatunaProductosApp() {
        filaSeleCategoria = -1;
        filaSeleProducto = -1;

        listaCategorias = new ListaCategorias();
        listaProductos = new ListaProductos();
        
        initComponents();
        
        listaCategorias.agregarInicio(new Categoria("Ropa"));
        listaProductos.agregarInicio(new Producto("Polo Negro", listaCategorias.obtenerNodo("Ropa").categoria, 55, 4));
        listaProductos.agregarInicio(new Producto("Polera Blanca", listaCategorias.obtenerNodo("Ropa").categoria, 60, 7));
        
        listaProductos.actualizarTabla();
        
        categoriasActualizarButton.setEnabled(false);
        categoriasEliminarButton.setEnabled(false);
        
        productosActualizarButton.setEnabled(false);
        productosEliminarButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoriasTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        categoriasNombreTextField = new javax.swing.JTextField();
        categoriasActualizarButton = new javax.swing.JButton();
        categoriasAgregarButton = new javax.swing.JButton();
        categoriasEliminarButton = new javax.swing.JButton();
        categoriasSeleccionLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        productosTable = new javax.swing.JTable();
        productosNombreTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        productosPrecioTextField = new javax.swing.JTextField();
        productosCategoriaComboBox = new javax.swing.JComboBox<>();
        productosAgregarButton = new javax.swing.JButton();
        productosActualizarButton = new javax.swing.JButton();
        productosEliminarButton = new javax.swing.JButton();
        productosSeleccionLabel = new javax.swing.JLabel();
        siguientePanelButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        productosStockSpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Categorias"));

        categoriasTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "NÃºmero de Productos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        categoriasTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                categoriasTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(categoriasTable);

        jLabel2.setText("Nombre:");

        categoriasActualizarButton.setText("Actualizar");
        categoriasActualizarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriasActualizarButtonActionPerformed(evt);
            }
        });

        categoriasAgregarButton.setText("Agregar");
        categoriasAgregarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriasAgregarButtonActionPerformed(evt);
            }
        });

        categoriasEliminarButton.setText("Eliminar");
        categoriasEliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriasEliminarButtonActionPerformed(evt);
            }
        });

        categoriasSeleccionLabel.setText("Categoria Seleccionada: N/A");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(categoriasNombreTextField))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(categoriasAgregarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(categoriasActualizarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoriasEliminarButton))
                    .addComponent(categoriasSeleccionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(categoriasNombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoriasActualizarButton)
                    .addComponent(categoriasAgregarButton)
                    .addComponent(categoriasEliminarButton))
                .addGap(40, 40, 40)
                .addComponent(categoriasSeleccionLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Productos"));

        productosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Categoria", "Precio", "Stock"
            }
        ));
        productosTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productosTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(productosTable);

        jLabel3.setText("Nombre:");

        jLabel4.setText("Categoria:");

        jLabel5.setText("Precio:");

        productosCategoriaComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        productosAgregarButton.setText("Agregar");
        productosAgregarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productosAgregarButtonActionPerformed(evt);
            }
        });

        productosActualizarButton.setText("Actualizar");
        productosActualizarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productosActualizarButtonActionPerformed(evt);
            }
        });

        productosEliminarButton.setText("Eliminar");
        productosEliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productosEliminarButtonActionPerformed(evt);
            }
        });

        productosSeleccionLabel.setText("Producto Seleccionado: N/A");

        siguientePanelButton.setText("Siguiente Panel");
        siguientePanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguientePanelButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Stock:");

        productosStockSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(productosSeleccionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6)
                                .addComponent(jLabel3))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(productosNombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(productosStockSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(productosPrecioTextField)
                                        .addComponent(productosCategoriaComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addComponent(siguientePanelButton)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(productosAgregarButton)
                        .addGap(18, 18, 18)
                        .addComponent(productosActualizarButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(productosEliminarButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(productosNombreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(productosCategoriaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(productosPrecioTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(productosStockSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(productosAgregarButton)
                            .addComponent(productosActualizarButton)
                            .addComponent(productosEliminarButton))
                        .addGap(57, 57, 57)
                        .addComponent(productosSeleccionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addComponent(siguientePanelButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Registro de Productos", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1044, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productosEliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productosEliminarButtonActionPerformed
        if (filaSeleProducto < 0) {
            return;
        }

        NodoProductos nodo = listaProductos.obtenerNodo(filaSeleProducto);
        listaProductos.eliminarNodo(nodo);
        listaProductos.actualizarTabla();

        productosTable.clearSelection();
        filaSeleProducto = -1;
        productosSeleccionLabel.setText("Producto Seleccionado: N/A");
        productosNombreTextField.setText("");
        productosCategoriaComboBox.setSelectedIndex(0);
        productosPrecioTextField.setText("");

        productosAgregarButton.setEnabled(true);
        productosActualizarButton.setEnabled(false);
        productosEliminarButton.setEnabled(false);
    }//GEN-LAST:event_productosEliminarButtonActionPerformed

    private void productosActualizarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productosActualizarButtonActionPerformed
        if (filaSeleProducto < 0) {
            return;
        }

        NodoProductos nodo = listaProductos.obtenerNodo(filaSeleProducto);

        String name = productosNombreTextField.getText().trim().replaceAll("\\s+", " ");
        String precio = productosPrecioTextField.getText().trim().strip();
        int stock = (int) productosStockSpinner.getValue();

        if (name.isEmpty()) {
            mostrarError("El espacio del nombre esta vacio");
            return;
        } else if (precio.isEmpty()) {
            mostrarError("El espacio del precio esta vacio");
            return;
        } else if (!esDouble(precio)) {
            mostrarError("El precio solo permite numeros");
            return;
        }

        Categoria aux = nodo.producto.getCategoria();

        nodo.producto.setNombre(name);
        nodo.producto.setCategoria(listaCategorias.obtenerNodo(productosCategoriaComboBox.getSelectedItem().toString()).categoria);
        nodo.producto.setPrecio(Double.parseDouble(precio));
        nodo.producto.setStock(stock);

        if (aux != nodo.producto.getCategoria()) {
            listaCategorias.sumarProducto(nodo.producto.getCategoria().toString());
            listaCategorias.restarProducto(aux.toString());
        }

        listaCategorias.actualizarTabla();
        listaProductos.actualizarTabla();

        productosTable.clearSelection();
        filaSeleProducto = -1;
        productosSeleccionLabel.setText("Producto Seleccionado: N/A");
        productosNombreTextField.setText("");
        productosCategoriaComboBox.setSelectedIndex(0);
        productosPrecioTextField.setText("");
        productosStockSpinner.setValue(0);

        productosAgregarButton.setEnabled(true);
        productosActualizarButton.setEnabled(false);
        productosEliminarButton.setEnabled(false);
    }//GEN-LAST:event_productosActualizarButtonActionPerformed

    private void productosAgregarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productosAgregarButtonActionPerformed
        String name = productosNombreTextField.getText().trim().replaceAll("\\s+", " ");
        String precio = productosPrecioTextField.getText().trim().strip();

        if (name.isEmpty()) {
            mostrarError("El espacio del nombre esta vacio");
            return;
        } else if (precio.isEmpty()) {
            mostrarError("El espacio del precio esta vacio");
            return;
        } else if (!esDouble(precio)) {
            mostrarError("El precio solo permite numeros");
            return;
        }
        
        int stock = (int) productosStockSpinner.getValue();

        Producto producto = new Producto(name, listaCategorias.obtenerNodo(productosCategoriaComboBox.getSelectedItem().toString()).categoria, Double.parseDouble(precio), stock);

        listaProductos.agregarFinal(producto);
        listaProductos.actualizarTabla();
        productosNombreTextField.setText("");
        productosCategoriaComboBox.setSelectedIndex(0);
        productosPrecioTextField.setText("");
    }//GEN-LAST:event_productosAgregarButtonActionPerformed

    private void productosTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productosTableMouseClicked
        int sele = productosTable.getSelectedRow();

        if (sele == filaSeleProducto) {
            productosTable.clearSelection();
            filaSeleProducto = -1;

            productosSeleccionLabel.setText("Producto Seleccionado: N/A");
            productosNombreTextField.setText("");
            productosCategoriaComboBox.setSelectedIndex(0);
            productosPrecioTextField.setText("");
            productosStockSpinner.setValue(0);

            productosAgregarButton.setEnabled(true);
            productosActualizarButton.setEnabled(false);
            productosEliminarButton.setEnabled(false);
            return;
        }

        NodoProductos nodo = listaProductos.obtenerNodo(sele);
        productosNombreTextField.setText(nodo.producto.getNombre());
        productosCategoriaComboBox.setSelectedItem(nodo.producto.getCategoria().toString());
        productosPrecioTextField.setText(String.valueOf(nodo.producto.getPrecio()));
        productosStockSpinner.setValue(nodo.producto.getStock());

        filaSeleProducto = sele;
        productosSeleccionLabel.setText("Producto Seleccionado: " + nodo.producto.getNombre());

        productosAgregarButton.setEnabled(false);
        productosActualizarButton.setEnabled(true);
        productosEliminarButton.setEnabled(true);
    }//GEN-LAST:event_productosTableMouseClicked

    private void categoriasEliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriasEliminarButtonActionPerformed
        if (filaSeleCategoria < 0) {
            return;
        }

        NodoCategorias nodo = listaCategorias.obtenerNodo(filaSeleCategoria);
        listaCategorias.eliminarNodo(nodo);
        listaCategorias.actualizarTabla();
        listaCategorias.eliminarProductosDe(nodo.categoria);

        categoriasTable.clearSelection();
        filaSeleCategoria = -1;
        categoriasSeleccionLabel.setText("Categoria Seleccionada: N/A");
        categoriasNombreTextField.setText("");

        categoriasAgregarButton.setEnabled(true);
        categoriasActualizarButton.setEnabled(false);
        categoriasEliminarButton.setEnabled(false);

        if (listaCategorias.contarNodos() > 0) {
            productosAgregarButton.setEnabled(true);
        } else {
            productosAgregarButton.setEnabled(false);
        }
    }//GEN-LAST:event_categoriasEliminarButtonActionPerformed

    private void categoriasAgregarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriasAgregarButtonActionPerformed
        String name = categoriasNombreTextField.getText().trim().replaceAll("\\s+", " ");

        if (name.isEmpty()) {
            mostrarError("El espacio del nombre esta vacio");
            return;
        } else if (listaCategorias.existeCategoria(name)) {
            mostrarError("La categoria " + name + " ya existe");
            return;
        }

        Categoria categoria = new Categoria(name);

        listaCategorias.agregarFinal(categoria);
        listaCategorias.actualizarTabla();
        categoriasNombreTextField.setText("");

        productosAgregarButton.setEnabled(true);
    }//GEN-LAST:event_categoriasAgregarButtonActionPerformed

    private void categoriasActualizarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriasActualizarButtonActionPerformed
        if (filaSeleCategoria < 0) {
            return;
        }

        NodoCategorias nodo = listaCategorias.obtenerNodo(filaSeleCategoria);

        String name = categoriasNombreTextField.getText().trim().replaceAll("\\s+", " ");

        if (name.isEmpty()) {
            mostrarError("El espacio del nombre esta vacio");
            return;
        } else if (listaCategorias.existeCategoria(name)) {
            mostrarError("La categoria " + name + " ya existe, Â¿Quieres cancelar la modificacion? Solo vuelve a dar click en la categoria.");
            return;
        }

        nodo.categoria.setNombre(name);

        listaCategorias.actualizarTabla();
        listaProductos.actualizarTabla();

        categoriasTable.clearSelection();
        filaSeleCategoria = -1;
        categoriasSeleccionLabel.setText("Categoria Seleccionada: N/A");
        categoriasNombreTextField.setText("");

        categoriasAgregarButton.setEnabled(true);
        categoriasActualizarButton.setEnabled(false);
        categoriasEliminarButton.setEnabled(false);
    }//GEN-LAST:event_categoriasActualizarButtonActionPerformed

    private void categoriasTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_categoriasTableMouseClicked
        int sele = categoriasTable.getSelectedRow();

        if (sele == filaSeleCategoria) {
            categoriasTable.clearSelection();
            filaSeleCategoria = -1;

            categoriasSeleccionLabel.setText("Categoria Seleccionada: N/A");
            categoriasNombreTextField.setText("");

            categoriasAgregarButton.setEnabled(true);
            categoriasActualizarButton.setEnabled(false);
            categoriasEliminarButton.setEnabled(false);
            return;
        }

        NodoCategorias nodo = listaCategorias.obtenerNodo(sele);
        categoriasNombreTextField.setText(nodo.categoria.getNombre());

        filaSeleCategoria = sele;
        categoriasSeleccionLabel.setText("Categoria Seleccionada: " + nodo.categoria.getNombre());

        categoriasAgregarButton.setEnabled(false);
        categoriasActualizarButton.setEnabled(true);
        categoriasEliminarButton.setEnabled(true);
    }//GEN-LAST:event_categoriasTableMouseClicked

    private void siguientePanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguientePanelButtonActionPerformed
        Main.mostrarFrame2();
    }//GEN-LAST:event_siguientePanelButtonActionPerformed

    public static void actualizarTablas() {
        listaCategorias.actualizarTabla();
        listaProductos.actualizarTabla();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QatunaProductosApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QatunaProductosApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QatunaProductosApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QatunaProductosApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QatunaProductosApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton categoriasActualizarButton;
    private javax.swing.JButton categoriasAgregarButton;
    private javax.swing.JButton categoriasEliminarButton;
    private javax.swing.JTextField categoriasNombreTextField;
    private javax.swing.JLabel categoriasSeleccionLabel;
    private javax.swing.JTable categoriasTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton productosActualizarButton;
    private javax.swing.JButton productosAgregarButton;
    private javax.swing.JComboBox<String> productosCategoriaComboBox;
    private javax.swing.JButton productosEliminarButton;
    private javax.swing.JTextField productosNombreTextField;
    private javax.swing.JTextField productosPrecioTextField;
    private javax.swing.JLabel productosSeleccionLabel;
    private javax.swing.JSpinner productosStockSpinner;
    private javax.swing.JTable productosTable;
    private javax.swing.JButton siguientePanelButton;
    // End of variables declaration//GEN-END:variables

    /**
     * METODOS
     */
    
    public void mostrarError(String error) {
        JFrame frame = new JFrame("Mensaje de error");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setBackground(Color.WHITE);

        JLabel label = new JLabel("Â¡Error: " + error + "!");
        label.setForeground(Color.RED);
        label.setFont(new Font("Arial", Font.BOLD, 18));

        panel.add(label);

        JOptionPane.showMessageDialog(frame, panel, "Error", JOptionPane.ERROR_MESSAGE);

    }

    public boolean contieneSoloNumeros(String text) {
        if (text == null || text.isEmpty()) {
            return false;
        }

        for (int i = 0; i < text.length(); i++) {
            if (!Character.isDigit(text.charAt(i))) {
                return false;
            }
        }

        return true;
    }

    public boolean esDouble(String str) {
        if (str == null || str.isEmpty()) {
            return false;
        }

        int countDot = 0;

        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);

            if (!Character.isDigit(c) && c != '.') {
                return false;
            }

            if (c == '.') {
                countDot++;

                if (countDot > 1) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * CATEGORIAS
     */
    public class NodoCategorias {

        Categoria categoria;
        NodoCategorias siguiente, anterior;

        public NodoCategorias(Categoria categoria) {
            this(categoria, null, null);
        }

        public NodoCategorias(Categoria categoria, NodoCategorias siguiente, NodoCategorias anterior) {
            this.categoria = categoria;
            this.siguiente = siguiente;
            this.anterior = anterior;
        }
    }

    public class ListaCategorias {

        NodoCategorias inicio;
        NodoCategorias fin;

        public ListaCategorias() {
            inicio = fin = null;
        }

        public boolean estaVacia() {
            return inicio == null;
        }

        public void agregarFinal(Categoria categoria) {
            if (!estaVacia()) {
                fin = new NodoCategorias(categoria, null, fin);
                fin.anterior.siguiente = fin;
            } else {
                inicio = fin = new NodoCategorias(categoria);
            }
        }

        public void agregarInicio(Categoria categoria) {
            if (!estaVacia()) {
                inicio = new NodoCategorias(categoria, inicio, null);
                inicio.siguiente.anterior = inicio;
            } else {
                inicio = fin = new NodoCategorias(categoria);
            }
        }

        public Categoria eliminarInicio() {
            Categoria elemento = inicio.categoria;
            if (inicio == fin) {
                inicio = fin = null;
            } else {
                inicio = inicio.siguiente;
                inicio.anterior = null;
            }
            return elemento;
        }

        public Categoria eliminarFinal() {
            Categoria elemento = fin.categoria;
            if (inicio == fin) {
                inicio = fin = null;
            } else {
                fin = fin.anterior;
                fin.siguiente = null;
            }
            return elemento;
        }

        public boolean eliminarNodo(NodoCategorias nodo) {
            NodoCategorias actual = inicio;

            while (actual != null) {
                if (actual.categoria == nodo.categoria) {
                    break;
                }
                actual = actual.siguiente;
            }

            if (actual == null) {
                return false;
            }

            if (actual.anterior != null) {
                actual.anterior.siguiente = actual.siguiente;
            } else {
                inicio = actual.siguiente;
            }

            if (actual.siguiente != null) {
                actual.siguiente.anterior = actual.anterior;
            } else {
                fin = actual.anterior;
            }

            return true;
        }

        public int contarNodos() {
            int contador = 0;
            NodoCategorias actual = inicio;
            while (actual != null) {
                contador++;
                actual = actual.siguiente;
            }
            return contador;
        }

        public NodoCategorias obtenerNodo(int index) {
            int contador = 0;
            NodoCategorias actual = inicio;
            while (actual != null) {
                if (index == contador) {
                    break;
                }
                contador++;
                actual = actual.siguiente;
            }
            return actual;
        }

        public NodoCategorias sumarProducto(String name) {
            NodoCategorias actual = obtenerNodo(name);
            if (actual != null) {
                actual.categoria.setProductos(actual.categoria.getProductos() + 1);
            }
            actualizarTabla();
            return actual;
        }

        public NodoCategorias restarProducto(String name) {
            NodoCategorias actual = obtenerNodo(name);
            if (actual != null) {
                actual.categoria.setProductos(actual.categoria.getProductos() - 1);
            }
            actualizarTabla();
            return actual;
        }

        public NodoCategorias obtenerNodo(String name) {
            NodoCategorias actual = inicio;
            while (actual != null) {
                if (name.equalsIgnoreCase(actual.categoria.getNombre())) {
                    break;
                }
                actual = actual.siguiente;
            }
            return actual;
        }

        public boolean existeCategoria(String name) {
            if (estaVacia()) {
                return false;
            }

            NodoCategorias actual = inicio;
            while (actual != null) {
                if (name.equalsIgnoreCase(actual.categoria.getNombre())) {
                    return true;
                }
                actual = actual.siguiente;
            }

            return false;
        }

        public Object[][] obtenerDatosTabla() {
            int numNodos = contarNodos();
            Object[][] datos = new Object[numNodos][3];
            NodoCategorias actual = inicio;
            int fila = 0;
            while (actual != null) {
                datos[fila][0] = actual.categoria.getID().toString();
                datos[fila][1] = actual.categoria.getNombre();
                datos[fila][2] = actual.categoria.getProductos();
                actual = actual.siguiente;
                fila++;
            }
            return datos;
        }

        public String[] obtenerListaNombres() {
            int numNodos = contarNodos();
            String[] lista = new String[numNodos];
            NodoCategorias actual = inicio;
            int fila = 0;
            while (actual != null) {
                lista[fila] = actual.categoria.getNombre();
                actual = actual.siguiente;
                fila++;
            }
            return lista;
        }

        public void actualizarTabla() {
            DefaultTableModel modeloTabla = (DefaultTableModel) categoriasTable.getModel();
            modeloTabla.setRowCount(0);
            Object[][] datos = obtenerDatosTabla();
            for (Object[] fila : datos) {
                modeloTabla.addRow(fila);
            }

            String[] nuevaLista = obtenerListaNombres();
            productosCategoriaComboBox.removeAllItems();

            for (String elemento : nuevaLista) {
                productosCategoriaComboBox.addItem(elemento);
            }
        }

        public void eliminarProductosDe(Categoria categoria) {
            if (filaSeleProducto > -1) {
                if (listaProductos.obtenerNodo(filaSeleProducto).producto.getCategoria() == categoria) {
                    productosTable.clearSelection();
                    filaSeleProducto = -1;
                    productosSeleccionLabel.setText("Producto Seleccionado: N/A");
                    productosNombreTextField.setText("");
                    productosCategoriaComboBox.setSelectedIndex(0);
                    productosPrecioTextField.setText("");

                    productosAgregarButton.setEnabled(true);
                    productosActualizarButton.setEnabled(false);
                    productosEliminarButton.setEnabled(false);
                }
            }
            NodoProductos actual = listaProductos.inicio;
            while (actual != null) {
                if (actual.producto.getCategoria() == categoria) {
                    listaProductos.eliminarNodo(actual);
                }
                actual = actual.siguiente;
            }
            listaProductos.actualizarTabla();
        }
    }

    /**
     * PRODUCTOS
     */
    public class NodoProductos {

        Producto producto;
        NodoProductos siguiente, anterior;

        public NodoProductos(Producto producto) {
            this(producto, null, null);
        }

        public NodoProductos(Producto producto, NodoProductos siguiente, NodoProductos anterior) {
            this.producto = producto;
            this.siguiente = siguiente;
            this.anterior = anterior;
        }
    }

    public class ListaProductos {

        NodoProductos inicio;
        NodoProductos fin;

        public ListaProductos() {
            inicio = fin = null;
        }

        public boolean estaVacia() {
            return inicio == null;
        }

        public void agregarFinal(Producto producto) {
            if (!estaVacia()) {
                fin = new NodoProductos(producto, null, fin);
                fin.anterior.siguiente = fin;
            } else {
                inicio = fin = new NodoProductos(producto);
            }
            listaCategorias.sumarProducto(producto.getCategoria().getNombre());
        }

        public void agregarInicio(Producto producto) {
            if (!estaVacia()) {
                inicio = new NodoProductos(producto, inicio, null);
                inicio.siguiente.anterior = inicio;
            } else {
                inicio = fin = new NodoProductos(producto);
            }
            listaCategorias.sumarProducto(producto.getCategoria().getNombre());
        }

        public Producto eliminarInicio() {
            Producto elemento = inicio.producto;
            if (inicio == fin) {
                inicio = fin = null;
            } else {
                inicio = inicio.siguiente;
                inicio.anterior = null;
            }
            listaCategorias.restarProducto(elemento.getCategoria().getNombre());
            return elemento;
        }

        public Producto eliminarFinal() {
            Producto elemento = fin.producto;
            if (inicio == fin) {
                inicio = fin = null;
            } else {
                fin = fin.anterior;
                fin.siguiente = null;
            }
            listaCategorias.restarProducto(elemento.getCategoria().getNombre());
            return elemento;
        }

        public boolean eliminarNodo(NodoProductos nodo) {
            NodoProductos actual = inicio;

            while (actual != null) {
                if (actual.producto == nodo.producto) {
                    break;
                }
                actual = actual.siguiente;
            }

            if (actual == null) {
                return false;
            }

            if (actual.anterior != null) {
                actual.anterior.siguiente = actual.siguiente;
            } else {
                inicio = actual.siguiente;
            }

            if (actual.siguiente != null) {
                actual.siguiente.anterior = actual.anterior;
            } else {
                fin = actual.anterior;
            }
            listaCategorias.restarProducto(actual.producto.getCategoria().getNombre());
            return true;
        }

        public int contarNodos() {
            int contador = 0;
            NodoProductos actual = inicio;
            while (actual != null) {
                contador++;
                actual = actual.siguiente;
            }
            return contador;
        }

        public NodoProductos obtenerNodo(int index) {
            int contador = 0;
            NodoProductos actual = inicio;
            while (actual != null) {
                if (index == contador) {
                    break;
                }
                contador++;
                actual = actual.siguiente;
            }
            return actual;
        }
        
        public String[] obtenerListaNombres() {
            int numNodos = contarNodos();
            String[] lista = new String[numNodos];
            NodoProductos actual = inicio;
            int fila = 0;
            while (actual != null) {
                lista[fila] = actual.producto.getCategoria().getNombre() + " | " + actual.producto.getNombre() + " - $" + actual.producto.getPrecio() + " Stock: " + actual.producto.getStock();
                actual = actual.siguiente;
                fila++;
            }
            return lista;
        }

        public Object[][] obtenerDatosTabla() {
            int numNodos = contarNodos();
            Object[][] datos = new Object[numNodos][5];
            NodoProductos actual = inicio;
            int fila = 0;
            while (actual != null) {
                datos[fila][0] = actual.producto.getID().toString();
                datos[fila][1] = actual.producto.getNombre();
                datos[fila][2] = actual.producto.getCategoria().toString();
                datos[fila][3] = actual.producto.getPrecio();
                datos[fila][4] = actual.producto.getStock();
                actual = actual.siguiente;
                fila++;
            }
            return datos;
        }

        public void actualizarTabla() {
            DefaultTableModel modeloTabla = (DefaultTableModel) productosTable.getModel();
            modeloTabla.setRowCount(0);
            Object[][] datos = obtenerDatosTabla();
            for (Object[] fila : datos) {
                modeloTabla.addRow(fila);
            }
        }
    }
}
