package pe.edu.ucv.proyectoedd;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ItemEvent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import pe.edu.ucv.proyectoedd.QatunaClientesApp.NodoClientes;
import pe.edu.ucv.proyectoedd.QatunaProductosApp.NodoProductos;
import pe.edu.ucv.proyectoedd.pedidos.Pedido;
import pe.edu.ucv.proyectoedd.productos.Producto;

/**
 * @author Grupo 3
 */
public class QatunaPedidosApp extends javax.swing.JFrame {

    int filaSelePedido;
    ListaPedidos listaPedidos;

    /**
     * Creates new form QatunaApp
     */
    public QatunaPedidosApp() {
        filaSelePedido = -1;

        listaPedidos = new ListaPedidos();

        initComponents();

        pedidoActualizarButton.setEnabled(false);
        pedidoEliminarButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nuevoPedidoAgregarButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        nuevoPedidoUbicacionTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        nuevoPedidoClienteComboBox = new javax.swing.JComboBox<>();
        nuevoPedidoProductoComboBox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        nuevoPedidoCantidadSpinner = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pedidosTable = new javax.swing.JTable();
        pedidoUbicacionTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pedidoActualizarButton = new javax.swing.JButton();
        pedidoEliminarButton = new javax.swing.JButton();
        pedidoSeleccionLabel = new javax.swing.JLabel();
        anteriorPanelButton = new javax.swing.JButton();
        clienteSeleccionLabel = new javax.swing.JLabel();
        pedidoEntregadoComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Nuevo Pedido"));

        jLabel2.setText("Cliente:");

        nuevoPedidoAgregarButton.setText("Agregar");
        nuevoPedidoAgregarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoPedidoAgregarButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Producto:");

        jLabel7.setText("Ubicacion:");

        nuevoPedidoClienteComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        nuevoPedidoProductoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        nuevoPedidoProductoComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nuevoPedidoProductoComboBoxItemStateChanged(evt);
            }
        });

        jLabel8.setText("Cantidad:");

        nuevoPedidoCantidadSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 1, 1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(nuevoPedidoAgregarButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nuevoPedidoUbicacionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                            .addComponent(nuevoPedidoClienteComboBox, 0, 366, Short.MAX_VALUE)
                            .addComponent(nuevoPedidoProductoComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(nuevoPedidoCantidadSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(573, 573, 573))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(nuevoPedidoClienteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(nuevoPedidoProductoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(nuevoPedidoUbicacionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(nuevoPedidoCantidadSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(nuevoPedidoAgregarButton)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Administrar Pedidos"));

        pedidosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Cliente", "Producto", "Ubicacion", "Cantidad", "Entregado"
            }
        ));
        pedidosTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pedidosTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(pedidosTable);

        jLabel3.setText("Ubicacion:");

        jLabel4.setText("Entregado:");

        pedidoActualizarButton.setText("Actualizar");
        pedidoActualizarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedidoActualizarButtonActionPerformed(evt);
            }
        });

        pedidoEliminarButton.setText("Eliminar");
        pedidoEliminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedidoEliminarButtonActionPerformed(evt);
            }
        });

        pedidoSeleccionLabel.setText("Pedido Seleccionado: N/A");

        anteriorPanelButton.setText("Anterior Panel");
        anteriorPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorPanelButtonActionPerformed(evt);
            }
        });

        clienteSeleccionLabel.setText("Cliente: N/A");

        pedidoEntregadoComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Si", "No" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(anteriorPanelButton)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pedidoSeleccionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(pedidoEntregadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(90, 90, 90))
                                    .addComponent(pedidoUbicacionTextField)))
                            .addComponent(clienteSeleccionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(pedidoActualizarButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pedidoEliminarButton)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(pedidoUbicacionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(pedidoEntregadoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pedidoActualizarButton)
                            .addComponent(pedidoEliminarButton))
                        .addGap(46, 46, 46)
                        .addComponent(pedidoSeleccionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clienteSeleccionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                        .addComponent(anteriorPanelButton)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Registro de Pedidos", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pedidoEliminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedidoEliminarButtonActionPerformed
        if (filaSelePedido < 0) {
            return;
        }
        
        NodoPedidos nodo = listaPedidos.obtenerNodo(filaSelePedido);
        listaPedidos.eliminarNodo(nodo);
        listaPedidos.actualizarTabla();
        
        Producto producto = nodo.pedido.getProducto();
        producto.setStock(producto.getStock() + nodo.pedido.getCantidad());
        actualizarComboBox();
        QatunaProductosApp.actualizarTablas();

        pedidosTable.clearSelection();
        filaSelePedido = -1;
        pedidoSeleccionLabel.setText("Pedido Seleccionado: N/A");
        clienteSeleccionLabel.setText("Cliente: N/A");
        pedidoUbicacionTextField.setText("");
        pedidoEntregadoComboBox.setSelectedIndex(0);
        
        pedidoActualizarButton.setEnabled(false);
        pedidoEliminarButton.setEnabled(false);
    }//GEN-LAST:event_pedidoEliminarButtonActionPerformed

    private void pedidoActualizarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedidoActualizarButtonActionPerformed
        if (filaSelePedido < 0) {
            return;
        }
        
        NodoPedidos nodo = listaPedidos.obtenerNodo(filaSelePedido);

        String ubicacion = pedidoUbicacionTextField.getText().trim().replaceAll("\\s+", " ");
        
        if (ubicacion.isEmpty()) {
            mostrarError("El espacio de la ubicacion esta vacio");
            return;
        }

        nodo.pedido.setUbicacion(ubicacion);
        nodo.pedido.setEntregado(pedidoEntregadoComboBox.getSelectedIndex() == 0);

        listaPedidos.actualizarTabla();

        pedidosTable.clearSelection();
        filaSelePedido = -1;
        pedidoSeleccionLabel.setText("Pedido Seleccionado: N/A");
        clienteSeleccionLabel.setText("Cliente: N/A");
        pedidoUbicacionTextField.setText("");
        pedidoEntregadoComboBox.setSelectedIndex(0);
        
        pedidoActualizarButton.setEnabled(false);
        pedidoEliminarButton.setEnabled(false);
    }//GEN-LAST:event_pedidoActualizarButtonActionPerformed

    private void pedidosTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pedidosTableMouseClicked
        int sele = pedidosTable.getSelectedRow();

        if (sele == filaSelePedido) {
            pedidosTable.clearSelection();
            filaSelePedido = -1;

            pedidoSeleccionLabel.setText("Pedido Seleccionado: N/A");
            clienteSeleccionLabel.setText("Cliente: N/A");
            pedidoUbicacionTextField.setText("");
            pedidoEntregadoComboBox.setSelectedIndex(0);
            
            pedidoActualizarButton.setEnabled(false);
            pedidoEliminarButton.setEnabled(false);
            return;
        }

        NodoPedidos nodo = listaPedidos.obtenerNodo(sele);
        pedidoUbicacionTextField.setText(nodo.pedido.getUbicacion());
        pedidoEntregadoComboBox.setSelectedIndex(nodo.pedido.isEntregado() ? 0 : 1);

        filaSelePedido = sele;
        pedidoSeleccionLabel.setText("Pedido Seleccionado: " + nodo.pedido.getProducto().getNombre());
        clienteSeleccionLabel.setText("Cliente: " + nodo.pedido.getCliente().getNombre() + " " + nodo.pedido.getCliente().getApellidos());
        
        pedidoActualizarButton.setEnabled(true);
        pedidoEliminarButton.setEnabled(true);
    }//GEN-LAST:event_pedidosTableMouseClicked

    private void nuevoPedidoAgregarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoPedidoAgregarButtonActionPerformed
        String ubicacion = nuevoPedidoUbicacionTextField.getText().trim().replaceAll("\\s+", " ");
        SpinnerNumberModel modelo = (SpinnerNumberModel) nuevoPedidoCantidadSpinner.getModel();
        int cantidad = modelo.getNumber().intValue();
        
        if (ubicacion.isEmpty()) {
            mostrarError("El espacio de la ubicacion esta vacio");
            return;
        }
        
        NodoClientes nodoCliente = QatunaClientesApp.listaClientes.obtenerNodo(nuevoPedidoClienteComboBox.getSelectedIndex());
        NodoProductos nodoProducto = QatunaProductosApp.listaProductos.obtenerNodo(nuevoPedidoProductoComboBox.getSelectedIndex());
        Pedido pedido = new Pedido(nodoCliente.cliente, nodoProducto.producto, ubicacion, cantidad);

        listaPedidos.agregarFinal(pedido);
        listaPedidos.actualizarTabla();
        
        nodoProducto.producto.setStock(nodoProducto.producto.getStock() - cantidad);
        
        actualizarComboBox();
        QatunaProductosApp.actualizarTablas();
        
        nuevoPedidoClienteComboBox.setSelectedIndex(0);
        nuevoPedidoProductoComboBox.setSelectedIndex(0);
        nuevoPedidoUbicacionTextField.setText("");
    }//GEN-LAST:event_nuevoPedidoAgregarButtonActionPerformed

    private void anteriorPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorPanelButtonActionPerformed
        Main.mostrarFrame2();
    }//GEN-LAST:event_anteriorPanelButtonActionPerformed

    private void nuevoPedidoProductoComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nuevoPedidoProductoComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            NodoProductos nodoProducto = QatunaProductosApp.listaProductos.obtenerNodo(nuevoPedidoProductoComboBox.getSelectedIndex());

            if (nodoProducto.producto.getStock() < 1) {
                nuevoPedidoAgregarButton.setEnabled(false);
                SpinnerModel nuevoModelo = new SpinnerNumberModel(0, 0, 0, 0);
                nuevoPedidoCantidadSpinner.setModel(nuevoModelo);
                nuevoPedidoCantidadSpinner.setEnabled(false);
            } else {
                nuevoPedidoAgregarButton.setEnabled(true);
                nuevoPedidoCantidadSpinner.setEnabled(true);
                SpinnerModel nuevoModelo = new SpinnerNumberModel(1, 1, nodoProducto.producto.getStock(), 1);
                nuevoPedidoCantidadSpinner.setModel(nuevoModelo);
            }
        }
    }//GEN-LAST:event_nuevoPedidoProductoComboBoxItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QatunaProductosApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QatunaProductosApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QatunaProductosApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QatunaProductosApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QatunaClientesApp().setVisible(true);
            }
        });
    }
    
    private void actualizarComboBox() {
        String[] nuevaListaClientes = QatunaClientesApp.listaClientes.obtenerListaNombres();
        nuevoPedidoClienteComboBox.removeAllItems();

        for (String elemento : nuevaListaClientes) {
            nuevoPedidoClienteComboBox.addItem(elemento);
        }
        
        String[] nuevaListaProductos = QatunaProductosApp.listaProductos.obtenerListaNombres();
        nuevoPedidoProductoComboBox.removeAllItems();

        for (String elemento : nuevaListaProductos) {
            nuevoPedidoProductoComboBox.addItem(elemento);
        }
    }
    
    @Override
    public void setVisible(boolean b) {
        String[] nuevaListaClientes = QatunaClientesApp.listaClientes.obtenerListaNombres();
        nuevoPedidoClienteComboBox.removeAllItems();

        for (String elemento : nuevaListaClientes) {
            nuevoPedidoClienteComboBox.addItem(elemento);
        }
        
        String[] nuevaListaProductos = QatunaProductosApp.listaProductos.obtenerListaNombres();
        nuevoPedidoProductoComboBox.removeAllItems();

        for (String elemento : nuevaListaProductos) {
            nuevoPedidoProductoComboBox.addItem(elemento);
        }
        super.setVisible(b);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anteriorPanelButton;
    private javax.swing.JLabel clienteSeleccionLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton nuevoPedidoAgregarButton;
    private javax.swing.JSpinner nuevoPedidoCantidadSpinner;
    private javax.swing.JComboBox<String> nuevoPedidoClienteComboBox;
    private javax.swing.JComboBox<String> nuevoPedidoProductoComboBox;
    private javax.swing.JTextField nuevoPedidoUbicacionTextField;
    private javax.swing.JButton pedidoActualizarButton;
    private javax.swing.JButton pedidoEliminarButton;
    private javax.swing.JComboBox<String> pedidoEntregadoComboBox;
    private javax.swing.JLabel pedidoSeleccionLabel;
    private javax.swing.JTextField pedidoUbicacionTextField;
    private javax.swing.JTable pedidosTable;
    // End of variables declaration//GEN-END:variables

    /**
     * METODOS
     */
    public void mostrarError(String error) {
        JFrame frame = new JFrame("Mensaje de error");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setBackground(Color.WHITE);

        JLabel label = new JLabel("¡Error: " + error + "!");
        label.setForeground(Color.RED);
        label.setFont(new Font("Arial", Font.BOLD, 18));

        panel.add(label);

        JOptionPane.showMessageDialog(frame, panel, "Error", JOptionPane.ERROR_MESSAGE);

    }

    public boolean contieneSoloNumeros(String text) {
        if (text == null || text.isEmpty()) {
            return false;
        }

        for (int i = 0; i < text.length(); i++) {
            if (!Character.isDigit(text.charAt(i))) {
                return false;
            }
        }

        return true;
    }

    public boolean esInteger(String str) {
        if (str == null || str.isEmpty()) {
            return false;
        }

        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);

            if (!Character.isDigit(c)) {
                return false;
            }
        }

        return true;
    }
    
    /**
     * PEDIDOS
     */
    public class NodoPedidos {

        Pedido pedido;
        NodoPedidos siguiente, anterior;

        public NodoPedidos(Pedido pedido) {
            this(pedido, null, null);
        }

        public NodoPedidos(Pedido pedido, NodoPedidos siguiente, NodoPedidos anterior) {
            this.pedido = pedido;
            this.siguiente = siguiente;
            this.anterior = anterior;
        }
    }
    
    public class ListaPedidos {

        NodoPedidos inicio;
        NodoPedidos fin;

        public ListaPedidos() {
            inicio = fin = null;
        }

        public boolean estaVacia() {
            return inicio == null;
        }

        public void agregarFinal(Pedido pedido) {
            if (!estaVacia()) {
                fin = new NodoPedidos(pedido, null, fin);
                fin.anterior.siguiente = fin;
            } else {
                inicio = fin = new NodoPedidos(pedido);
            }
        }

        public void agregarInicio(Pedido pedido) {
            if (!estaVacia()) {
                inicio = new NodoPedidos(pedido, inicio, null);
                inicio.siguiente.anterior = inicio;
            } else {
                inicio = fin = new NodoPedidos(pedido);
            }
        }

        public Pedido eliminarInicio() {
            Pedido elemento = inicio.pedido;
            if (inicio == fin) {
                inicio = fin = null;
            } else {
                inicio = inicio.siguiente;
                inicio.anterior = null;
            }
            return elemento;
        }

        public Pedido eliminarFinal() {
            Pedido elemento = fin.pedido;
            if (inicio == fin) {
                inicio = fin = null;
            } else {
                fin = fin.anterior;
                fin.siguiente = null;
            }
            return elemento;
        }

        public boolean eliminarNodo(NodoPedidos nodo) {
            NodoPedidos actual = inicio;

            while (actual != null) {
                if (actual.pedido == nodo.pedido) {
                    break;
                }
                actual = actual.siguiente;
            }

            if (actual == null) {
                return false;
            }

            if (actual.anterior != null) {
                actual.anterior.siguiente = actual.siguiente;
            } else {
                inicio = actual.siguiente;
            }

            if (actual.siguiente != null) {
                actual.siguiente.anterior = actual.anterior;
            } else {
                fin = actual.anterior;
            }
            return true;
        }

        public int contarNodos() {
            int contador = 0;
            NodoPedidos actual = inicio;
            while (actual != null) {
                contador++;
                actual = actual.siguiente;
            }
            return contador;
        }

        public NodoPedidos obtenerNodo(int index) {
            int contador = 0;
            NodoPedidos actual = inicio;
            while (actual != null) {
                if (index == contador) {
                    break;
                }
                contador++;
                actual = actual.siguiente;
            }
            return actual;
        }

        public Object[][] obtenerDatosTabla() {
            int numNodos = contarNodos();
            Object[][] datos = new Object[numNodos][6];
            NodoPedidos actual = inicio;
            int fila = 0;
            while (actual != null) {
                datos[fila][0] = actual.pedido.getID().toString();
                datos[fila][1] = actual.pedido.getCliente().getNombre() + " " + actual.pedido.getCliente().getApellidos();
                datos[fila][2] = actual.pedido.getProducto().getNombre() + " $" + actual.pedido.getProducto().getPrecio();
                datos[fila][3] = actual.pedido.getUbicacion();
                datos[fila][4] = actual.pedido.getCantidad();
                datos[fila][5] = actual.pedido.isEntregado() ? "Si" : "No";
                actual = actual.siguiente;
                fila++;
            }
            return datos;
        }

        public void actualizarTabla() {
            DefaultTableModel modeloTabla = (DefaultTableModel) pedidosTable.getModel();
            modeloTabla.setRowCount(0);
            Object[][] datos = obtenerDatosTabla();
            for (Object[] fila : datos) {
                modeloTabla.addRow(fila);
            }
        }
    }
}
